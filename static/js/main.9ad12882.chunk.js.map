{"version":3,"sources":["components/UserInput/UserInput.js","components/Rows/Rows.js","components/Cockpit/Cockpit.js","App.js","serviceWorker.js","index.js"],"names":["userInput","state","name","email","showButton","onlyLetterMethod","event","test","key","preventDefault","handleEmailChange","_this","setState","target","value","handleNameChange","handleResetInput","_this2","this","_this$state","enabled","length","react_default","a","createElement","className","onSubmit","props","send","id","type","placeholder","onKeyPress","onChange","maxLength","autoFocus","pattern","disabled","onClick","Component","rows","scope","index","delete","index_es","icon","faTimes","Cockpit","toggled","toggledButton","faPlusCircle","App","users","showForm","message","sort","click","messageError","userLimitHandler","doesShow","doesShowButton","userDataHandler","data","Math","random","Object","toConsumableArray","concat","axios","post","then","response","console","log","toggleFormHandler","toggleButtonHandler","deleteUserHandler","userIndex","user","filter","i","reorderHandler","updatedClick","ascUsers","b","parseFloat","fetch","json","descUsers","get","_this3","map","Rows_Rows","components_Cockpit_Cockpit","error","UserInput_UserInput","reactstrap_es","striped","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ad12882.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './UserInput.css'\r\n\r\n\r\nclass userInput extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        showButton: false,\r\n    }\r\n\r\n    onlyLetterMethod = (event) => {\r\n        const re = /[a-zA-Z]+/g;\r\n        if (!re.test(event.key)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleEmailChange = (event) => {\r\n        this.setState({ email: event.target.value });\r\n    }\r\n\r\n    handleNameChange = (event) => {\r\n        this.setState({ name: event.target.value });\r\n    }\r\n\r\n    handleResetInput = () => {\r\n        this.setState({ name: '', email: '' })\r\n    }\r\n\r\n    render() {\r\n        const { email, name } = this.state;\r\n        const enabled =\r\n            email.length > 0 &&\r\n            name.length > 0;\r\n\r\n        return (\r\n            <div className='header'>\r\n                <form className='form' onSubmit={this.props.send}>\r\n                    <input id='name' name='name' type='text' placeholder='Name'\r\n                        value={this.state.name}\r\n                        onKeyPress={(event) => this.onlyLetterMethod(event)}\r\n                        onChange={this.handleNameChange}\r\n                        maxLength='20' autoFocus />\r\n\r\n                    <input id='email' name='email' type='text' placeholder='E-mail' pattern='[^@\\s]+@[^@\\s]+\\.[^@\\s]+'\r\n                        value={this.state.email}\r\n                        onChange={this.handleEmailChange} />\r\n\r\n                    <button className='submit' disabled={!enabled} >Submit</button>\r\n                </form>\r\n                <button className='reset' onClick={this.handleResetInput} >Reset fields</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default userInput","import React from 'react';\r\nimport './Rows.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nconst rows = (props) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{props.index}</th>\r\n            <td>{props.name}</td>\r\n            <td>{props.email}</td>\r\n            <td><button className='deleteButton' onClick={props.delete}><FontAwesomeIcon icon={faTimes} /></button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default rows;","import React, { Component } from 'react'\r\nimport './Cockpit.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nclass Cockpit extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='addUserBtn' >\r\n                <button onClick={() => {\r\n                    this.props.toggled();\r\n                    this.props.toggledButton()\r\n                }}\r\n                    disabled={this.props.disabled} ><FontAwesomeIcon icon={faPlusCircle} /> <span>Add user</span> </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cockpit","import React, { Component } from 'react';\nimport './App.css';\nimport { Table } from 'reactstrap';\n\nimport axios from 'axios';\n\nimport UserInput from './components/UserInput/UserInput';\nimport Rows from './components/Rows/Rows';\nimport Cockpit from './components/Cockpit/Cockpit';\n\nclass App extends Component {\n    state = {\n        users: [],\n        showForm: false,\n        showButton: true,\n        message: '',\n        sort: false,\n        click: 0,\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/users')\n            .then(response => {\n                this.setState({ users: response.data });\n                console.log(response);\n                if (this.state.users.length > 9) {\n                    this.setState({ message: 'You can`t add new user becasue of limit' })\n                }\n            })\n    }\n\n    messageError = () => {\n        if (this.state.users.length > 9) {\n            this.setState({ message: 'You can`t add new user becasue of limit' })\n        }\n    }\n\n    userLimitHandler = () => {\n        const doesShow = this.state.showForm;\n        const doesShowButton = this.state.showButton;\n\n        this.setState({\n            message: 'You can`t add new user becasue of limit',\n            showButton: !doesShowButton,\n            showForm: !doesShow,\n        })\n    }\n\n    userDataHandler = (event) => {\n        event.preventDefault();\n\n        const doesShow = this.state.showForm;\n        const doesShowButton = this.state.showButton;\n\n        const data = {\n            id: Math.random() * 100 + 10,\n            name: event.target.name.value,\n            email: event.target.email.value,\n        }\n\n\n        if (this.state.users.length >= 9) {\n            this.userLimitHandler()\n        }\n\n        this.setState({\n            users: [...this.state.users, data],\n            message: 'You have successfully added a user',\n            showButton: !doesShowButton,\n            showForm: !doesShow,\n        })\n\n        axios.post('http://localhost:4000/users', data)\n            .then((response) => {\n                console.log(response);\n            })\n\n    }\n\n    toggleFormHandler = () => {\n        const doesShow = this.state.showForm;\n        this.setState({\n            showForm: !doesShow,\n            message: '',\n        })\n    };\n\n    toggleButtonHandler = () => {\n        const doesShowButton = this.state.showButton;\n        this.setState({\n            showButton: !doesShowButton,\n            message: '',\n        })\n    }\n\n    deleteUserHandler = (userIndex, user) => {\n\n        this.setState({\n            users: this.state.users.filter((user, i) => i !== userIndex),\n            message: 'You have successfully delete user',\n            showButton: true,\n            showForm: false,\n        });\n\n        axios.delete('http://localhost:4000/users/' + user.id)\n            .then(response => {\n                console.log(response)\n            })\n    }\n\n    reorderHandler = (event) => {\n        event.preventDefault();\n\n        let updatedClick = this.state.click\n        updatedClick++\n        this.setState({ click: updatedClick })\n\n        if (updatedClick <= 1) {\n            let ascUsers = this.state.users\n            ascUsers.sort((a, b) => {\n                return parseFloat(a.name.length) - parseFloat(b.name.length);\n            });\n\n            this.setState({\n                users: ascUsers,\n            })\n\n            fetch('http://localhost:4000/users?_sort=name.length&_order=asc')\n                .then(response => response.json())\n                .then(json => console.log(json))\n        }\n\n        if (updatedClick > 1) {\n\n            let descUsers = this.state.users\n            descUsers.sort((a, b) => {\n                return parseFloat(b.name.length) - parseFloat(a.name.length);\n            });\n\n            this.setState({\n                users: descUsers,\n            })\n\n            fetch('http://localhost:4000/users?_sort=name.length&_order=desc')\n                .then(response => response.json())\n                .then(json => console.log(json))\n        }\n    }\n\n    render() {\n        const users = this.state.users.map((user, index, id) => {\n            return <Rows index={index + 1} key={index} delete={() => this.deleteUserHandler(index, user)} name={user.name} email={user.email} />\n        })\n\n        return (\n            <div className=\"App\" >\n                <div className='Header'>\n                    {this.state.showButton && <Cockpit error={this.messageError}\n                        disabled={this.state.users.length > 9}\n                        toggledButton={this.toggleButtonHandler}\n                        toggled={this.toggleFormHandler} />}\n                    <span className='message'>{this.state.message}</span>\n                    {this.state.showForm && <UserInput send={this.userDataHandler} />}\n                </div>\n                <Table striped>\n                    <thead onClick={(event) => this.reorderHandler(event)} >\n                        <tr>\n                            <th>LP</th>\n                            <th>Name</th>\n                            <th>E-mail</th>\n                            <th>Delete User</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {users}\n                    </tbody>\n                </Table>\n            </div >\n        );\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}